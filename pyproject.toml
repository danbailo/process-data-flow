[tool.poetry]
name = "process_data_flow"
version = "0.1.0"
description = "This project implements a basic example of a process data flow. In this case, the handle of some data end to end, from the receive until the 'register' of this data."
authors = ["Daniel Bailo <danbailoufms@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
typer = "^0.12.3"
python-dotenv = "^1.0.1"
tenacity = "^8.3.0"
python-dateutil = "^2.9.0.post0"
regex = "^2024.5.15"
httpx = "^0.27.0"
structlog = "^24.2.0"
pydantic = "^2.7.3"
fastapi = "^0.111.0"
polyfactory = "^2.16.0"
pika = "^1.3.2"
schedule = "^1.2.2"

[tool.poetry.group.dev.dependencies]
ipdb = "^0.13.13"
pytest = "^8.2.2"
ruff = "^0.4.8"
mypy = "^1.10.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.1"
pytest-cov = "^5.0.0"
pytest-randomly = "^3.15.0"
coverage-badge = "^1.1.1"
mypy-extensions = "^1.0.0"

[tool.coverage.report]
skip_empty = true
show_missing = true
omit = [
    "*main*",
    "decorators.py"
]
sort="Cover"

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["I", "F", "T100"]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint.pylint]
max-returns = 2

[tool.mypy]
disable_error_code = [
    "union-attr", "import-untyped", "arg-type",
    "return-value", "return", "override",
    "assignment", "var-annotated"
]
plugins = [
  "pydantic.mypy"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
